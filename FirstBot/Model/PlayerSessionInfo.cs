/* 
 * MskDotNet.Race API
 *
 * MskDotNet.Race
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// PlayerSessionInfo
    /// </summary>
    [DataContract]
    public partial class PlayerSessionInfo :  IEquatable<PlayerSessionInfo>, IValidatableObject
    {
        /// <summary>
        /// Defines CurrentDirection
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CurrentDirectionEnum
        {
            
            /// <summary>
            /// Enum West for value: West
            /// </summary>
            [EnumMember(Value = "West")]
            West = 1,
            
            /// <summary>
            /// Enum NorthWest for value: NorthWest
            /// </summary>
            [EnumMember(Value = "NorthWest")]
            NorthWest = 2,
            
            /// <summary>
            /// Enum NorthEast for value: NorthEast
            /// </summary>
            [EnumMember(Value = "NorthEast")]
            NorthEast = 3,
            
            /// <summary>
            /// Enum East for value: East
            /// </summary>
            [EnumMember(Value = "East")]
            East = 4,
            
            /// <summary>
            /// Enum SouthEast for value: SouthEast
            /// </summary>
            [EnumMember(Value = "SouthEast")]
            SouthEast = 5,
            
            /// <summary>
            /// Enum SouthWest for value: SouthWest
            /// </summary>
            [EnumMember(Value = "SouthWest")]
            SouthWest = 6
        }

        /// <summary>
        /// Gets or Sets CurrentDirection
        /// </summary>
        [DataMember(Name="CurrentDirection", EmitDefaultValue=false)]
        public CurrentDirectionEnum? CurrentDirection { get; set; }
        /// <summary>
        /// Defines PlayerStatus
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PlayerStatusEnum
        {
            
            /// <summary>
            /// Enum NotBad for value: NotBad
            /// </summary>
            [EnumMember(Value = "NotBad")]
            NotBad = 1,
            
            /// <summary>
            /// Enum Drifted for value: Drifted
            /// </summary>
            [EnumMember(Value = "Drifted")]
            Drifted = 2,
            
            /// <summary>
            /// Enum Hungry for value: Hungry
            /// </summary>
            [EnumMember(Value = "Hungry")]
            Hungry = 3,
            
            /// <summary>
            /// Enum Punished for value: Punished
            /// </summary>
            [EnumMember(Value = "Punished")]
            Punished = 4,
            
            /// <summary>
            /// Enum HappyAsInsane for value: HappyAsInsane
            /// </summary>
            [EnumMember(Value = "HappyAsInsane")]
            HappyAsInsane = 5
        }

        /// <summary>
        /// Gets or Sets PlayerStatus
        /// </summary>
        [DataMember(Name="PlayerStatus", EmitDefaultValue=false)]
        public PlayerStatusEnum? PlayerStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PlayerSessionInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public PlayerSessionInfo()
        {
        }
        
        /// <summary>
        /// Gets or Sets SessionId
        /// </summary>
        [DataMember(Name="SessionId", EmitDefaultValue=false)]
        public string SessionId { get; private set; }

        /// <summary>
        /// Gets or Sets PlayerId
        /// </summary>
        [DataMember(Name="PlayerId", EmitDefaultValue=false)]
        public string PlayerId { get; private set; }


        /// <summary>
        /// Gets or Sets CurrentLocation
        /// </summary>
        [DataMember(Name="CurrentLocation", EmitDefaultValue=false)]
        public Location CurrentLocation { get; private set; }

        /// <summary>
        /// Gets or Sets Finish
        /// </summary>
        [DataMember(Name="Finish", EmitDefaultValue=false)]
        public Location Finish { get; private set; }

        /// <summary>
        /// Gets or Sets Radius
        /// </summary>
        [DataMember(Name="Radius", EmitDefaultValue=false)]
        public int? Radius { get; private set; }

        /// <summary>
        /// Gets or Sets CurrentSpeed
        /// </summary>
        [DataMember(Name="CurrentSpeed", EmitDefaultValue=false)]
        public int? CurrentSpeed { get; private set; }


        /// <summary>
        /// Gets or Sets NeighbourCells
        /// </summary>
        [DataMember(Name="NeighbourCells", EmitDefaultValue=false)]
        public List<ValueTupleLocationSurfaceType> NeighbourCells { get; private set; }

        /// <summary>
        /// Gets or Sets Fuel
        /// </summary>
        [DataMember(Name="Fuel", EmitDefaultValue=false)]
        public int? Fuel { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PlayerSessionInfo {\n");
            sb.Append("  SessionId: ").Append(SessionId).Append("\n");
            sb.Append("  PlayerId: ").Append(PlayerId).Append("\n");
            sb.Append("  CurrentDirection: ").Append(CurrentDirection).Append("\n");
            sb.Append("  CurrentLocation: ").Append(CurrentLocation).Append("\n");
            sb.Append("  Finish: ").Append(Finish).Append("\n");
            sb.Append("  Radius: ").Append(Radius).Append("\n");
            sb.Append("  CurrentSpeed: ").Append(CurrentSpeed).Append("\n");
            sb.Append("  PlayerStatus: ").Append(PlayerStatus).Append("\n");
            sb.Append("  NeighbourCells: ").Append(NeighbourCells).Append("\n");
            sb.Append("  Fuel: ").Append(Fuel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PlayerSessionInfo);
        }

        /// <summary>
        /// Returns true if PlayerSessionInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of PlayerSessionInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PlayerSessionInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SessionId == input.SessionId ||
                    (this.SessionId != null &&
                    this.SessionId.Equals(input.SessionId))
                ) && 
                (
                    this.PlayerId == input.PlayerId ||
                    (this.PlayerId != null &&
                    this.PlayerId.Equals(input.PlayerId))
                ) && 
                (
                    this.CurrentDirection == input.CurrentDirection ||
                    (this.CurrentDirection != null &&
                    this.CurrentDirection.Equals(input.CurrentDirection))
                ) && 
                (
                    this.CurrentLocation == input.CurrentLocation ||
                    (this.CurrentLocation != null &&
                    this.CurrentLocation.Equals(input.CurrentLocation))
                ) && 
                (
                    this.Finish == input.Finish ||
                    (this.Finish != null &&
                    this.Finish.Equals(input.Finish))
                ) && 
                (
                    this.Radius == input.Radius ||
                    (this.Radius != null &&
                    this.Radius.Equals(input.Radius))
                ) && 
                (
                    this.CurrentSpeed == input.CurrentSpeed ||
                    (this.CurrentSpeed != null &&
                    this.CurrentSpeed.Equals(input.CurrentSpeed))
                ) && 
                (
                    this.PlayerStatus == input.PlayerStatus ||
                    (this.PlayerStatus != null &&
                    this.PlayerStatus.Equals(input.PlayerStatus))
                ) && 
                (
                    this.NeighbourCells == input.NeighbourCells ||
                    this.NeighbourCells != null &&
                    this.NeighbourCells.SequenceEqual(input.NeighbourCells)
                ) && 
                (
                    this.Fuel == input.Fuel ||
                    (this.Fuel != null &&
                    this.Fuel.Equals(input.Fuel))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SessionId != null)
                    hashCode = hashCode * 59 + this.SessionId.GetHashCode();
                if (this.PlayerId != null)
                    hashCode = hashCode * 59 + this.PlayerId.GetHashCode();
                if (this.CurrentDirection != null)
                    hashCode = hashCode * 59 + this.CurrentDirection.GetHashCode();
                if (this.CurrentLocation != null)
                    hashCode = hashCode * 59 + this.CurrentLocation.GetHashCode();
                if (this.Finish != null)
                    hashCode = hashCode * 59 + this.Finish.GetHashCode();
                if (this.Radius != null)
                    hashCode = hashCode * 59 + this.Radius.GetHashCode();
                if (this.CurrentSpeed != null)
                    hashCode = hashCode * 59 + this.CurrentSpeed.GetHashCode();
                if (this.PlayerStatus != null)
                    hashCode = hashCode * 59 + this.PlayerStatus.GetHashCode();
                if (this.NeighbourCells != null)
                    hashCode = hashCode * 59 + this.NeighbourCells.GetHashCode();
                if (this.Fuel != null)
                    hashCode = hashCode * 59 + this.Fuel.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
