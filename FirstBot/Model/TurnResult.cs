/* 
 * MskDotNet.Race API
 *
 * MskDotNet.Race
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TurnResult
    /// </summary>
    [DataContract]
    public partial class TurnResult :  IEquatable<TurnResult>, IValidatableObject
    {
        /// <summary>
        /// Defines Status
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum NotBad for value: NotBad
            /// </summary>
            [EnumMember(Value = "NotBad")]
            NotBad = 1,
            
            /// <summary>
            /// Enum Drifted for value: Drifted
            /// </summary>
            [EnumMember(Value = "Drifted")]
            Drifted = 2,
            
            /// <summary>
            /// Enum Hungry for value: Hungry
            /// </summary>
            [EnumMember(Value = "Hungry")]
            Hungry = 3,
            
            /// <summary>
            /// Enum Punished for value: Punished
            /// </summary>
            [EnumMember(Value = "Punished")]
            Punished = 4,
            
            /// <summary>
            /// Enum HappyAsInsane for value: HappyAsInsane
            /// </summary>
            [EnumMember(Value = "HappyAsInsane")]
            HappyAsInsane = 5
        }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Defines Heading
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum HeadingEnum
        {
            
            /// <summary>
            /// Enum West for value: West
            /// </summary>
            [EnumMember(Value = "West")]
            West = 1,
            
            /// <summary>
            /// Enum NorthWest for value: NorthWest
            /// </summary>
            [EnumMember(Value = "NorthWest")]
            NorthWest = 2,
            
            /// <summary>
            /// Enum NorthEast for value: NorthEast
            /// </summary>
            [EnumMember(Value = "NorthEast")]
            NorthEast = 3,
            
            /// <summary>
            /// Enum East for value: East
            /// </summary>
            [EnumMember(Value = "East")]
            East = 4,
            
            /// <summary>
            /// Enum SouthEast for value: SouthEast
            /// </summary>
            [EnumMember(Value = "SouthEast")]
            SouthEast = 5,
            
            /// <summary>
            /// Enum SouthWest for value: SouthWest
            /// </summary>
            [EnumMember(Value = "SouthWest")]
            SouthWest = 6
        }

        /// <summary>
        /// Gets or Sets Heading
        /// </summary>
        [DataMember(Name="Heading", EmitDefaultValue=false)]
        public HeadingEnum? Heading { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TurnResult" /> class.
        /// </summary>
        /// <param name="command">command.</param>
        /// <param name="visibleCells">visibleCells.</param>
        /// <param name="location">location.</param>
        /// <param name="shortestWayLength">shortestWayLength.</param>
        /// <param name="speed">speed.</param>
        /// <param name="status">status.</param>
        /// <param name="heading">heading.</param>
        /// <param name="fuelWaste">fuelWaste.</param>
        public TurnResult(TurnCommand command = default(TurnCommand), List<ValueTupleLocationSurfaceType> visibleCells = default(List<ValueTupleLocationSurfaceType>), Location location = default(Location), int? shortestWayLength = default(int?), int? speed = default(int?), StatusEnum? status = default(StatusEnum?), HeadingEnum? heading = default(HeadingEnum?), int? fuelWaste = default(int?))
        {
            this.Command = command;
            this.VisibleCells = visibleCells;
            this.Location = location;
            this.ShortestWayLength = shortestWayLength;
            this.Speed = speed;
            this.Status = status;
            this.Heading = heading;
            this.FuelWaste = fuelWaste;
        }
        
        /// <summary>
        /// Gets or Sets Command
        /// </summary>
        [DataMember(Name="Command", EmitDefaultValue=false)]
        public TurnCommand Command { get; set; }

        /// <summary>
        /// Gets or Sets VisibleCells
        /// </summary>
        [DataMember(Name="VisibleCells", EmitDefaultValue=false)]
        public List<ValueTupleLocationSurfaceType> VisibleCells { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name="Location", EmitDefaultValue=false)]
        public Location Location { get; set; }

        /// <summary>
        /// Gets or Sets ShortestWayLength
        /// </summary>
        [DataMember(Name="ShortestWayLength", EmitDefaultValue=false)]
        public int? ShortestWayLength { get; set; }

        /// <summary>
        /// Gets or Sets Speed
        /// </summary>
        [DataMember(Name="Speed", EmitDefaultValue=false)]
        public int? Speed { get; set; }



        /// <summary>
        /// Gets or Sets FuelWaste
        /// </summary>
        [DataMember(Name="FuelWaste", EmitDefaultValue=false)]
        public int? FuelWaste { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TurnResult {\n");
            sb.Append("  Command: ").Append(Command).Append("\n");
            sb.Append("  VisibleCells: ").Append(VisibleCells).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  ShortestWayLength: ").Append(ShortestWayLength).Append("\n");
            sb.Append("  Speed: ").Append(Speed).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Heading: ").Append(Heading).Append("\n");
            sb.Append("  FuelWaste: ").Append(FuelWaste).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TurnResult);
        }

        /// <summary>
        /// Returns true if TurnResult instances are equal
        /// </summary>
        /// <param name="input">Instance of TurnResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TurnResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Command == input.Command ||
                    (this.Command != null &&
                    this.Command.Equals(input.Command))
                ) && 
                (
                    this.VisibleCells == input.VisibleCells ||
                    this.VisibleCells != null &&
                    this.VisibleCells.SequenceEqual(input.VisibleCells)
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.ShortestWayLength == input.ShortestWayLength ||
                    (this.ShortestWayLength != null &&
                    this.ShortestWayLength.Equals(input.ShortestWayLength))
                ) && 
                (
                    this.Speed == input.Speed ||
                    (this.Speed != null &&
                    this.Speed.Equals(input.Speed))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Heading == input.Heading ||
                    (this.Heading != null &&
                    this.Heading.Equals(input.Heading))
                ) && 
                (
                    this.FuelWaste == input.FuelWaste ||
                    (this.FuelWaste != null &&
                    this.FuelWaste.Equals(input.FuelWaste))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Command != null)
                    hashCode = hashCode * 59 + this.Command.GetHashCode();
                if (this.VisibleCells != null)
                    hashCode = hashCode * 59 + this.VisibleCells.GetHashCode();
                if (this.Location != null)
                    hashCode = hashCode * 59 + this.Location.GetHashCode();
                if (this.ShortestWayLength != null)
                    hashCode = hashCode * 59 + this.ShortestWayLength.GetHashCode();
                if (this.Speed != null)
                    hashCode = hashCode * 59 + this.Speed.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Heading != null)
                    hashCode = hashCode * 59 + this.Heading.GetHashCode();
                if (this.FuelWaste != null)
                    hashCode = hashCode * 59 + this.FuelWaste.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
