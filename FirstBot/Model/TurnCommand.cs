/* 
 * MskDotNet.Race API
 *
 * MskDotNet.Race
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TurnCommand
    /// </summary>
    [DataContract]
    public partial class TurnCommand :  IEquatable<TurnCommand>, IValidatableObject
    {
        /// <summary>
        /// Defines MovementDirection
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MovementDirectionEnum
        {
            
            /// <summary>
            /// Enum West for value: West
            /// </summary>
            [EnumMember(Value = "West")]
            West = 1,
            
            /// <summary>
            /// Enum NorthWest for value: NorthWest
            /// </summary>
            [EnumMember(Value = "NorthWest")]
            NorthWest = 2,
            
            /// <summary>
            /// Enum NorthEast for value: NorthEast
            /// </summary>
            [EnumMember(Value = "NorthEast")]
            NorthEast = 3,
            
            /// <summary>
            /// Enum East for value: East
            /// </summary>
            [EnumMember(Value = "East")]
            East = 4,
            
            /// <summary>
            /// Enum SouthEast for value: SouthEast
            /// </summary>
            [EnumMember(Value = "SouthEast")]
            SouthEast = 5,
            
            /// <summary>
            /// Enum SouthWest for value: SouthWest
            /// </summary>
            [EnumMember(Value = "SouthWest")]
            SouthWest = 6
        }

        /// <summary>
        /// Gets or Sets MovementDirection
        /// </summary>
        [DataMember(Name="MovementDirection", EmitDefaultValue=false)]
        public MovementDirectionEnum? MovementDirection { get; set; }
        /// <summary>
        /// Defines Heading
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum HeadingEnum
        {
            
            /// <summary>
            /// Enum West for value: West
            /// </summary>
            [EnumMember(Value = "West")]
            West = 1,
            
            /// <summary>
            /// Enum NorthWest for value: NorthWest
            /// </summary>
            [EnumMember(Value = "NorthWest")]
            NorthWest = 2,
            
            /// <summary>
            /// Enum NorthEast for value: NorthEast
            /// </summary>
            [EnumMember(Value = "NorthEast")]
            NorthEast = 3,
            
            /// <summary>
            /// Enum East for value: East
            /// </summary>
            [EnumMember(Value = "East")]
            East = 4,
            
            /// <summary>
            /// Enum SouthEast for value: SouthEast
            /// </summary>
            [EnumMember(Value = "SouthEast")]
            SouthEast = 5,
            
            /// <summary>
            /// Enum SouthWest for value: SouthWest
            /// </summary>
            [EnumMember(Value = "SouthWest")]
            SouthWest = 6
        }

        /// <summary>
        /// Gets or Sets Heading
        /// </summary>
        [DataMember(Name="Heading", EmitDefaultValue=false)]
        public HeadingEnum? Heading { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TurnCommand" /> class.
        /// </summary>
        /// <param name="location">location.</param>
        /// <param name="acceleration">acceleration.</param>
        /// <param name="movementDirection">movementDirection.</param>
        /// <param name="heading">heading.</param>
        /// <param name="speed">speed.</param>
        /// <param name="fuel">fuel.</param>
        public TurnCommand(Location location = default(Location), int? acceleration = default(int?), MovementDirectionEnum? movementDirection = default(MovementDirectionEnum?), HeadingEnum? heading = default(HeadingEnum?), int? speed = default(int?), int? fuel = default(int?))
        {
            this.Location = location;
            this.Acceleration = acceleration;
            this.MovementDirection = movementDirection;
            this.Heading = heading;
            this.Speed = speed;
            this.Fuel = fuel;
        }
        
        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name="Location", EmitDefaultValue=false)]
        public Location Location { get; set; }

        /// <summary>
        /// Gets or Sets Acceleration
        /// </summary>
        [DataMember(Name="Acceleration", EmitDefaultValue=false)]
        public int? Acceleration { get; set; }



        /// <summary>
        /// Gets or Sets Speed
        /// </summary>
        [DataMember(Name="Speed", EmitDefaultValue=false)]
        public int? Speed { get; set; }

        /// <summary>
        /// Gets or Sets Fuel
        /// </summary>
        [DataMember(Name="Fuel", EmitDefaultValue=false)]
        public int? Fuel { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TurnCommand {\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Acceleration: ").Append(Acceleration).Append("\n");
            sb.Append("  MovementDirection: ").Append(MovementDirection).Append("\n");
            sb.Append("  Heading: ").Append(Heading).Append("\n");
            sb.Append("  Speed: ").Append(Speed).Append("\n");
            sb.Append("  Fuel: ").Append(Fuel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TurnCommand);
        }

        /// <summary>
        /// Returns true if TurnCommand instances are equal
        /// </summary>
        /// <param name="input">Instance of TurnCommand to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TurnCommand input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.Acceleration == input.Acceleration ||
                    (this.Acceleration != null &&
                    this.Acceleration.Equals(input.Acceleration))
                ) && 
                (
                    this.MovementDirection == input.MovementDirection ||
                    (this.MovementDirection != null &&
                    this.MovementDirection.Equals(input.MovementDirection))
                ) && 
                (
                    this.Heading == input.Heading ||
                    (this.Heading != null &&
                    this.Heading.Equals(input.Heading))
                ) && 
                (
                    this.Speed == input.Speed ||
                    (this.Speed != null &&
                    this.Speed.Equals(input.Speed))
                ) && 
                (
                    this.Fuel == input.Fuel ||
                    (this.Fuel != null &&
                    this.Fuel.Equals(input.Fuel))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Location != null)
                    hashCode = hashCode * 59 + this.Location.GetHashCode();
                if (this.Acceleration != null)
                    hashCode = hashCode * 59 + this.Acceleration.GetHashCode();
                if (this.MovementDirection != null)
                    hashCode = hashCode * 59 + this.MovementDirection.GetHashCode();
                if (this.Heading != null)
                    hashCode = hashCode * 59 + this.Heading.GetHashCode();
                if (this.Speed != null)
                    hashCode = hashCode * 59 + this.Speed.GetHashCode();
                if (this.Fuel != null)
                    hashCode = hashCode * 59 + this.Fuel.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
